{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bar Chart Race \u00b6 Make animated bar chart races in Python with matplotlib. Installation \u00b6 Install with either: pip install bar_chart_race conda install -c conda-forge bar_chart_race Usage \u00b6 Must begin with a pandas DataFrame containing 'wide' data where: Every row represents a single period of time Each column holds the value for a particular category The index contains the time component (optional) The data below is an example of properly formatted data. It shows total deaths from COVID-19 for the highest 20 countries by date. Main function - bar_chart_race \u00b6 There is one main function, bar_chart_race , which we use to recreate the above video. All parameters are shown with their default value except for filename and title . >>> import bar_chart_race as bcr >>> df = bcr . load_dataset ( 'covid19' ) >>> bcr . bar_chart_race ( df = df , filename = 'covid19_horiz_desc.mp4' , orientation = 'h' , sort = 'desc' , n_bars = None , label_bars = True , use_index = True , steps_per_period = 10 , period_length = 500 , figsize = ( 6.5 , 3.5 ), cmap = 'dark24' , title = 'COVID-19 Deaths by Country' , bar_label_size = 7 , tick_label_size = 7 , period_label_size = 16 , fig = None ) Save animation to disk or return HTML \u00b6 Leave the filename parameter as None to return the animation as HTML. You can subsequently embed the animation into a Jupyter Notebook with the following. In [ 1 ]: bcr_html = bcr . bar_chart_race ( df = df , filename = None ) In [ 2 ]: from IPython.display import HTML In [ 3 ]: HTML ( bcr_html ) Use vertical bars and limit to top n_bars \u00b6 Make bars vertical by setting orientation to 'v' . Use n_bars if you want to limit the number of bars. The bars will transition on and off the graph. >>> df = bcr . load_dataset ( 'urban_pop' ) >>> bcr . bar_chart_race ( df = df , filename = 'videos/urban_vert_asc.gif' , orientation = 'v' , sort = 'asc' , n_bars = 8 , title = 'Urban Population' )","title":"Home"},{"location":"#bar-chart-race","text":"Make animated bar chart races in Python with matplotlib.","title":"Bar Chart Race"},{"location":"#installation","text":"Install with either: pip install bar_chart_race conda install -c conda-forge bar_chart_race","title":"Installation"},{"location":"#usage","text":"Must begin with a pandas DataFrame containing 'wide' data where: Every row represents a single period of time Each column holds the value for a particular category The index contains the time component (optional) The data below is an example of properly formatted data. It shows total deaths from COVID-19 for the highest 20 countries by date.","title":"Usage"},{"location":"#main-function-bar_chart_race","text":"There is one main function, bar_chart_race , which we use to recreate the above video. All parameters are shown with their default value except for filename and title . >>> import bar_chart_race as bcr >>> df = bcr . load_dataset ( 'covid19' ) >>> bcr . bar_chart_race ( df = df , filename = 'covid19_horiz_desc.mp4' , orientation = 'h' , sort = 'desc' , n_bars = None , label_bars = True , use_index = True , steps_per_period = 10 , period_length = 500 , figsize = ( 6.5 , 3.5 ), cmap = 'dark24' , title = 'COVID-19 Deaths by Country' , bar_label_size = 7 , tick_label_size = 7 , period_label_size = 16 , fig = None )","title":"Main function - bar_chart_race"},{"location":"#save-animation-to-disk-or-return-html","text":"Leave the filename parameter as None to return the animation as HTML. You can subsequently embed the animation into a Jupyter Notebook with the following. In [ 1 ]: bcr_html = bcr . bar_chart_race ( df = df , filename = None ) In [ 2 ]: from IPython.display import HTML In [ 3 ]: HTML ( bcr_html )","title":"Save animation to disk or return HTML"},{"location":"#use-vertical-bars-and-limit-to-top-n_bars","text":"Make bars vertical by setting orientation to 'v' . Use n_bars if you want to limit the number of bars. The bars will transition on and off the graph. >>> df = bcr . load_dataset ( 'urban_pop' ) >>> bcr . bar_chart_race ( df = df , filename = 'videos/urban_vert_asc.gif' , orientation = 'v' , sort = 'asc' , n_bars = 8 , title = 'Urban Population' )","title":"Use vertical bars and limit to top n_bars"},{"location":"installation/","text":"Installation \u00b6 Install from pypi or conda-forge pip install bar_chart_race conda install -c conda-forge bar_chart_race Installing ffmpeg \u00b6 In order to save animations as mp4/m4v/mov/etc... files, you must install ffmpeg , which allows for conversion to many different formats of video and audio. After installation, ensure that ffmpeg has been added to your path by going to your command line and entering ffmepg -version . Install ImageMagick for animated gifs \u00b6 If you desire to create animated gifs, you'll need to install ImageMagick . Verify that it has been added to your path with magick -version . Dependencies \u00b6 Bar Chart Race requires that you have both matplotlib and pandas installed.","title":"Installation"},{"location":"installation/#installation","text":"Install from pypi or conda-forge pip install bar_chart_race conda install -c conda-forge bar_chart_race","title":"Installation"},{"location":"installation/#installing-ffmpeg","text":"In order to save animations as mp4/m4v/mov/etc... files, you must install ffmpeg , which allows for conversion to many different formats of video and audio. After installation, ensure that ffmpeg has been added to your path by going to your command line and entering ffmepg -version .","title":"Installing ffmpeg"},{"location":"installation/#install-imagemagick-for-animated-gifs","text":"If you desire to create animated gifs, you'll need to install ImageMagick . Verify that it has been added to your path with magick -version .","title":"Install ImageMagick for animated gifs"},{"location":"installation/#dependencies","text":"Bar Chart Race requires that you have both matplotlib and pandas installed.","title":"Dependencies"},{"location":"tutorial/","text":"Tutorial \u00b6 bar_chart_race offers a wide range of inputs to customize the animation. On this page, we'll cover many of the available options. Data format \u00b6 The data you choose to animate as a bar chart race must be provided in a specific format. The data must be within a pandas DataFrame containing 'wide' data where: Each row represents a single period of time Each column holds the value for a particular category The index contains the time component (optional) Example data \u00b6 The data below is an example of properly formatted data. It shows total deaths from COVID-19 for several countries by date. Each row represents a single day's worth of data. Each column represents a single country's deaths. The index contains the date. Any pandas DataFrame that conforms to this structure may be used to create a bar chart race. Basic bar chart races \u00b6 A single main function, bar_chart_race , exists to create the animations. Calling it with the defaults returns the animation as an HTML string. The load_dataset function is available to load sample DataFrames. If you are working within a Jupyter Notebook, you can import the HTML function from the IPython.display module to embed the video directly into the notebook. import bar_chart_race as bcr from IPython.display import HTML df = bcr . load_dataset ( 'covid19_tutorial' ) html_string = bcr . bar_chart_race ( df ) HTML ( html_string ) .vid { display: flex; justify-content: center; } video { width: 85%; } Vertical bars \u00b6 By default, bars are horizontal. Use the orientation parameter to switch it to vertical. bcr . bar_chart_race ( df , orientation = 'v' ) Ascending bars \u00b6 By default, the bars are plotted in descending order. Change the order by setting sort to 'asc' . bcr . bar_chart_race ( df , sort = 'asc' ) Limit the number of bars \u00b6 By default, all columns will be plotted. Use n_bars to limit the number. When limiting bars, the smallest bar can drop off the plot. bcr . bar_chart_race ( df , n_bars = 6 ) Fix the order of the bars \u00b6 By default, the bars will be ordered. Set fixed_order to True or to a specific list of column names to keep the order the same throughout. bcr . bar_chart_race ( df , fixed_order = [ 'Iran' , 'USA' , 'Italy' , 'Spain' , 'Belgium' ]) Fix the maximum value \u00b6 By default, the maximum value of the axis moves with the largest bar. Set fixed_max to True to keep the maximum value equal to the largest overall value for all frames in the animation. bcr . bar_chart_race ( df , fixed_max = True ) Change animation smoothness \u00b6 By default, 10 frames are used to step from one period to the next. Increase/decrease the smoothness of the animation with steps_per_period . bcr . bar_chart_race ( df , steps_per_period = 3 ) Interpolate the period \u00b6 By default, the label for each frame changes after the entire period has been plotted. Linearly interpolate the value for the period with interpolate_period . Below, every frame increase by 1 / 10 of a day (2 hours and 24 minutes). bcr . bar_chart_race ( df , interpolate_period = True ) Plot properties \u00b6 Many properties of the plot can be set. figsize - sets the figure size using matplotlib figure inches (default: (6, 3.5) ) dpi - controls the dots per square inch (default: 144 ) label_bars - whether to label the bar values with text (default: True ) period_label - dictionary of matplotlib text properties or boolean (default: True ) title - title of plot bcr . bar_chart_race ( df , figsize = ( 5 , 3 ), dpi = 100 , label_bars = False , period_label = { 'x' : . 99 , 'y' : . 1 , 'ha' : 'right' , 'color' : 'red' }, title = 'COVID-19 Deaths by Country' ) Label sizes \u00b6 Control the size of labels with bar_label_size , tick_label_size , and title_size . bcr . bar_chart_race ( df , bar_label_size = 4 , tick_label_size = 5 , title = 'COVID-19 Deaths by Country' , title_size = 'smaller' ) Setting font properties \u00b6 Set font properties for all text objects with shared_fontdict . bcr . bar_chart_race ( df , title = 'COVID-19 Deaths by Country' , shared_fontdict = { 'family' : 'Helvetica' , 'weight' : 'bold' , 'color' : 'rebeccapurple' }) Customize bar properties \u00b6 Set bar_kwargs to a dictionary of keyword arguments forwarded to the matploblib bar function to control bar properties. bcr . bar_chart_race ( df , bar_kwargs = { 'alpha' : . 2 , 'ec' : 'black' , 'lw' : 3 }) Additional features \u00b6 There are several more additional features to customize the animation. Formatting the period \u00b6 Format the label of the period by setting period_fmt to a string with either a date directive or a new-style formatted string. bcr . bar_chart_race ( df , period_fmt = '%b %-d , %Y' ) Use numbers for the index instead of dates \u00b6 It's not necessary to have dates or times in the index of the DataFrame. Below, the index is dropped, which replaces it with integers beginning at 0. These are then interpolated and formatted. bcr . bar_chart_race ( df . reset_index ( drop = True ), interpolate_period = True , period_fmt = 'Index value - {x:.2f} ' ) Add text summarizing the entire period \u00b6 Define a function that accepts two arguments, the values and ranks of the current period of data, and returns a dictionary that will be passed to the matplotlib text function. def summary ( values , ranks ): total_deaths = int ( round ( values . sum (), - 2 )) s = f 'Total Deaths - { total_deaths : ,.0f } ' return { 'x' : . 99 , 'y' : . 05 , 's' : s , 'ha' : 'right' , 'size' : 8 } bcr . bar_chart_race ( df , period_summary_func = summary ) Add a perpendicular bar \u00b6 Add a single bar perpendicular to the main bars by defining a function that accepts two arguments, the values and ranks of the current period of data, and returns a single number, the position of the bar. You can use string names of aggregation functions that pandas understands. bcr . bar_chart_race ( df , perpendicular_bar_func = 'mean' ) An example with a user-defined function: def func ( values , ranks ): return values . quantile ( . 9 ) bcr . bar_chart_race ( df , perpendicular_bar_func = func ) Saving the animation \u00b6","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"bar_chart_race offers a wide range of inputs to customize the animation. On this page, we'll cover many of the available options.","title":"Tutorial"},{"location":"tutorial/#data-format","text":"The data you choose to animate as a bar chart race must be provided in a specific format. The data must be within a pandas DataFrame containing 'wide' data where: Each row represents a single period of time Each column holds the value for a particular category The index contains the time component (optional)","title":"Data format"},{"location":"tutorial/#example-data","text":"The data below is an example of properly formatted data. It shows total deaths from COVID-19 for several countries by date. Each row represents a single day's worth of data. Each column represents a single country's deaths. The index contains the date. Any pandas DataFrame that conforms to this structure may be used to create a bar chart race.","title":"Example data"},{"location":"tutorial/#basic-bar-chart-races","text":"A single main function, bar_chart_race , exists to create the animations. Calling it with the defaults returns the animation as an HTML string. The load_dataset function is available to load sample DataFrames. If you are working within a Jupyter Notebook, you can import the HTML function from the IPython.display module to embed the video directly into the notebook. import bar_chart_race as bcr from IPython.display import HTML df = bcr . load_dataset ( 'covid19_tutorial' ) html_string = bcr . bar_chart_race ( df ) HTML ( html_string ) .vid { display: flex; justify-content: center; } video { width: 85%; }","title":"Basic bar chart races"},{"location":"tutorial/#vertical-bars","text":"By default, bars are horizontal. Use the orientation parameter to switch it to vertical. bcr . bar_chart_race ( df , orientation = 'v' )","title":"Vertical bars"},{"location":"tutorial/#ascending-bars","text":"By default, the bars are plotted in descending order. Change the order by setting sort to 'asc' . bcr . bar_chart_race ( df , sort = 'asc' )","title":"Ascending bars"},{"location":"tutorial/#limit-the-number-of-bars","text":"By default, all columns will be plotted. Use n_bars to limit the number. When limiting bars, the smallest bar can drop off the plot. bcr . bar_chart_race ( df , n_bars = 6 )","title":"Limit the number of bars"},{"location":"tutorial/#fix-the-order-of-the-bars","text":"By default, the bars will be ordered. Set fixed_order to True or to a specific list of column names to keep the order the same throughout. bcr . bar_chart_race ( df , fixed_order = [ 'Iran' , 'USA' , 'Italy' , 'Spain' , 'Belgium' ])","title":"Fix the order of the bars"},{"location":"tutorial/#fix-the-maximum-value","text":"By default, the maximum value of the axis moves with the largest bar. Set fixed_max to True to keep the maximum value equal to the largest overall value for all frames in the animation. bcr . bar_chart_race ( df , fixed_max = True )","title":"Fix the maximum value"},{"location":"tutorial/#change-animation-smoothness","text":"By default, 10 frames are used to step from one period to the next. Increase/decrease the smoothness of the animation with steps_per_period . bcr . bar_chart_race ( df , steps_per_period = 3 )","title":"Change animation smoothness"},{"location":"tutorial/#interpolate-the-period","text":"By default, the label for each frame changes after the entire period has been plotted. Linearly interpolate the value for the period with interpolate_period . Below, every frame increase by 1 / 10 of a day (2 hours and 24 minutes). bcr . bar_chart_race ( df , interpolate_period = True )","title":"Interpolate the period"},{"location":"tutorial/#plot-properties","text":"Many properties of the plot can be set. figsize - sets the figure size using matplotlib figure inches (default: (6, 3.5) ) dpi - controls the dots per square inch (default: 144 ) label_bars - whether to label the bar values with text (default: True ) period_label - dictionary of matplotlib text properties or boolean (default: True ) title - title of plot bcr . bar_chart_race ( df , figsize = ( 5 , 3 ), dpi = 100 , label_bars = False , period_label = { 'x' : . 99 , 'y' : . 1 , 'ha' : 'right' , 'color' : 'red' }, title = 'COVID-19 Deaths by Country' )","title":"Plot properties"},{"location":"tutorial/#label-sizes","text":"Control the size of labels with bar_label_size , tick_label_size , and title_size . bcr . bar_chart_race ( df , bar_label_size = 4 , tick_label_size = 5 , title = 'COVID-19 Deaths by Country' , title_size = 'smaller' )","title":"Label sizes"},{"location":"tutorial/#setting-font-properties","text":"Set font properties for all text objects with shared_fontdict . bcr . bar_chart_race ( df , title = 'COVID-19 Deaths by Country' , shared_fontdict = { 'family' : 'Helvetica' , 'weight' : 'bold' , 'color' : 'rebeccapurple' })","title":"Setting font properties"},{"location":"tutorial/#customize-bar-properties","text":"Set bar_kwargs to a dictionary of keyword arguments forwarded to the matploblib bar function to control bar properties. bcr . bar_chart_race ( df , bar_kwargs = { 'alpha' : . 2 , 'ec' : 'black' , 'lw' : 3 })","title":"Customize bar properties"},{"location":"tutorial/#additional-features","text":"There are several more additional features to customize the animation.","title":"Additional features"},{"location":"tutorial/#formatting-the-period","text":"Format the label of the period by setting period_fmt to a string with either a date directive or a new-style formatted string. bcr . bar_chart_race ( df , period_fmt = '%b %-d , %Y' )","title":"Formatting the period"},{"location":"tutorial/#use-numbers-for-the-index-instead-of-dates","text":"It's not necessary to have dates or times in the index of the DataFrame. Below, the index is dropped, which replaces it with integers beginning at 0. These are then interpolated and formatted. bcr . bar_chart_race ( df . reset_index ( drop = True ), interpolate_period = True , period_fmt = 'Index value - {x:.2f} ' )","title":"Use numbers for the index instead of dates"},{"location":"tutorial/#add-text-summarizing-the-entire-period","text":"Define a function that accepts two arguments, the values and ranks of the current period of data, and returns a dictionary that will be passed to the matplotlib text function. def summary ( values , ranks ): total_deaths = int ( round ( values . sum (), - 2 )) s = f 'Total Deaths - { total_deaths : ,.0f } ' return { 'x' : . 99 , 'y' : . 05 , 's' : s , 'ha' : 'right' , 'size' : 8 } bcr . bar_chart_race ( df , period_summary_func = summary )","title":"Add text summarizing the entire period"},{"location":"tutorial/#add-a-perpendicular-bar","text":"Add a single bar perpendicular to the main bars by defining a function that accepts two arguments, the values and ranks of the current period of data, and returns a single number, the position of the bar. You can use string names of aggregation functions that pandas understands. bcr . bar_chart_race ( df , perpendicular_bar_func = 'mean' ) An example with a user-defined function: def func ( values , ranks ): return values . quantile ( . 9 ) bcr . bar_chart_race ( df , perpendicular_bar_func = func )","title":"Add a perpendicular bar"},{"location":"tutorial/#saving-the-animation","text":"","title":"Saving the animation"}]}